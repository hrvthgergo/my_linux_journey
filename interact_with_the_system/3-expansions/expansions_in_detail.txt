----------------
about expansions
----------------

so far we splitted tokens and identified commands.
the next steps in the process are to perform the various shell expansions, break the expanded tokens into lists of filenames and commands and arguments.
there are seven (+1) kinds of expansions. the processing order is;
		1) brace expansion
		2) tilde expansion, parameter and variable expansion, arithmetic expansion, and command substitution (done in a left-to-right fashion) (+1 process substitution);
		3) word splitting;
		4) filename expansion/globbing.
mind the folowings, only brace expansion, word splitting, and filename expansion can increase the number of words of the expansion; other expansions expand a single word to a single word.

------------------------
variables and expansions
------------------------

- name=value -> no spaces around "=" sign and should be lowercase
- $HOME
- ${#param}
- $(echo param)
- $(( 1**2 ))
- ~-,~+
- {1..5..2}

• Shell variables:
	- list of bash shell variables -> https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html#Bash-Variables
	- ${IFS@Q} -> word splitting values/characters

• Environment variables:
	- global variables that ca be accessed through any process, not just shell scripts
	- ENV_VAR=value -> user defined shell variable
	  export ENV_VAR -> environment variable

• Parameter and variable expansions: - retrieve the value stored in a parameter
	- $parameter or ${parameter}
	- ${#parameter} - num of characters contains by the parameter
	- ${parameter:offset/starting character:length}
	- list of parameter expansions: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html

• Arrays (indexed) -> store multiple different values at the same time
	- syntax:
		array=(elem0 elem1 elem2 ... elemN)

	- use spaces to separate values
	- indexes start from 0 and count up
	- array expansion:
		- ${array} -> return the first element
		- ${array[@]} -> return all elements
		- ${!array[@]} -> return indexes 0 1 2 3..
		- ${array[@]:offset/start} -> return values starting from :offset through array[@] the last element, offset can be both negative and positive nuts
		- ${array[@]:offset/start:length} -> return values starting from :offset through the defined length

		- array+=(elemN [elemN+1 ... elemM]) -> appends elem* values to the end of the array
		- array[index] -> change the value of the indexed elem
		- unset array[index] -> remove indexed element, BUT it creates gap between indexes as index numbers do not update automatically

• Command substitution: - directly reference the result of a command
	- $(command)

• Arithmetic expansion:
	- $(( expression ))
	- +,-,/,*,%,**,()

• Tilde expansion:
	- ~ -> $HOME
	- ~username
	- ~-,~+ -> $OLDPWD(previous workdir),$PWD(current workdir)
	- ~N, ~+N, ~-N

• Brace expansion: - automatically generating text according to a certain pattern
	- a mechanism by which arbitrary strings may be generated, similar to filename expansion, but the filenames generated need not exist
	- {1..5}
	- {a..f}
	- {1..5..2}
	- echo {a,b}/{1..3}/{c..d}
	>> a/1/c a/1/d a/2/c a/2/d a/3/c a/3/d b/1/c b/1/d b/2/c b/2/d b/3/c b/3/d
	- {ucb/{ex,edit},lib/{ex?.?*,how_ex}}

• Process substitution: - treat the output of a command(s) as a file
	- syntax:
		<(command)
		<(command1 [| command2 | ... | commandN])

• word splitting: after processing the preceding expansions, the shell will try to split the results of unquoted parameter expansions, unquoted arithmetic expansions and unquoted command substitutions into individual words. mind the different word splitting result of $var and "$var".
		  ${IFS@Q} - bash will split a word using the characters stored in the IFS variable, which by default contains space, tab, and newline.

• filename expansion/globbing: any word containing one of globbing characters is interpreted as a pattern, and replaced with a list of alphabetically-sorted filenames that match the pattern (if they exist)
			- globbing pattern characters: *, ?, [], [!]. can be extended -> shopt -s extglob.
				- symbol(pattern1 | ... | patternN) -> symbols are: ?, *. @, +, !.